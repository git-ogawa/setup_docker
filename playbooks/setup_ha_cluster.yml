---
- name: Load module and set IP forwarding
  hosts: cluster
  gather_facts: true
  tasks:
    - name: Set sysctl
      ansible.builtin.import_role:
        name: cluster
        tasks_from: sysctl

    - name: Add cluster server address to /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: '^{{ hostvars[item].internal_ipv4 | default(hostvars[item].ansible_host) }}'
        line: '{{ hostvars[item].internal_ipv4 | default(hostvars[item].ansible_host) }} {{ item }}'
      become: true
      loop: "{{ groups.all }}"

- name: Setup kubernetes cluster with kubeadm
  hosts: control_plane[0]
  gather_facts: true
  tasks:
    - name: Kubeadm init
      ansible.builtin.import_role:
        name: kubeadm
        tasks_from: init
      vars:
        load_balancer_dns: "{{ hostvars[groups.load_balancer[0]].dns_name | default(hostvars[groups.load_balancer[0]].ansible_host) }}"
        ipv4_address: "{{ ansible_facts.default_ipv4.address }}"

    - name: Set kubeconfig
      ansible.builtin.import_role:
        name: kubeadm
        tasks_from: put_admin_conf

    - name: Install CNI
      ansible.builtin.include_role:
        name: "{{ cni_type }}"

    - name: Wait 30 sec until pod status is up
      ansible.builtin.wait_for:
        timeout: 30
      delegate_to: localhost

- name: Get cluster token, ca.crt hash and certificate-key
  hosts: control_plane[0]
  gather_facts: true
  tasks:
    - name: Generate token
      ansible.builtin.command: kubeadm token create
      register: token
      changed_when: true

    - name: Get ca-cert-hash
      ansible.builtin.shell: >
        set -o pipefail &&
        openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt |
        openssl rsa -pubin -outform der 2>/dev/null |
        openssl dgst -sha256 -hex | sed 's/^.* //'
      register: hash
      changed_when: false
      args:
        executable: /bin/bash

    - name: Generate new certificate-key
      ansible.builtin.command: kubeadm init phase upload-certs --upload-certs
      become: true
      register: result
      changed_when: result.rc == 0
      failed_when: result.rc != 0

    - name: Set certificate-key
      ansible.builtin.set_fact:
        certificate_key: "{{ result.stdout.splitlines()[-1] }}"

- name: Add nodes to control plane
  hosts: control_plane[1:]
  gather_facts: false
  tasks:
    - name: Start kubelet
      ansible.builtin.systemd:
        name: kubelet
        state: started
        enabled: true
      become: true

    - name: Check if /run/systemd/resolve/resolv.conf exists
      ansible.builtin.stat:
        path: /run/systemd/resolve/resolv.conf
      register: result

    - name: Add nodes to control plane
      ansible.builtin.import_role:
        name: kubeadm
        tasks_from: join
      vars:
        load_balancer_dns: "{{ hostvars[groups.load_balancer[0]].dns_name | default(hostvars[groups.load_balancer[0]].ansible_host) }}"
        ipv4_address: "{{ ansible_facts.default_ipv4.address }}"
        kubeadm_token: "{{ hostvars[groups.control_plane[0]].token.stdout }}"
        kubeadm_discovery_token_ca_cert_hash: "sha256:{{ hostvars[groups.control_plane[0]].hash.stdout }}"
        kubeadm_control_plane_cert_key: "{{ hostvars[groups.control_plane[0]].certificate_key }}"
        kubeadm_node_type: control-plane
        run_systemd_resolv_exist: "{{ result.stat.exists | bool }}"

    - name: Set kubeconfig
      ansible.builtin.import_role:
        name: kubeadm
        tasks_from: put_admin_conf

- name: Add worker nodes to cluster
  hosts: worker
  gather_facts: false
  tasks:
    - name: Start kubelet
      ansible.builtin.systemd:
        name: kubelet
        state: started
        enabled: true
      become: true

    - name: Check if /run/systemd/resolve/resolv.conf exists
      ansible.builtin.stat:
        path: /run/systemd/resolve/resolv.conf
      register: result

    - name: Add a worker node to the cluster
      ansible.builtin.import_role:
        name: kubeadm
        tasks_from: join
      vars:
        load_balancer_dns: "{{ hostvars[groups.load_balancer[0]].dns_name | default(hostvars[groups.load_balancer[0]].ansible_host) }}"
        ipv4_address: "{{ ansible_facts.default_ipv4.address }}"
        kubeadm_token: "{{ hostvars[groups.control_plane[0]].token.stdout }}"
        kubeadm_discovery_token_ca_cert_hash: "sha256:{{ hostvars[groups.control_plane[0]].hash.stdout }}"
        kubeadm_node_type: worker
        run_systemd_resolv_exist: "{{ result.stat.exists | bool }}"

- name: Post process
  hosts: control_plane[0]
  gather_facts: false
  tasks:
    - name: Delete the token on control_node
      ansible.builtin.command: "kubeadm token delete {{ hostvars[primary_node].token.stdout }}"
      changed_when: true
      vars:
        primary_node: "{{ groups.control_plane[0] }}"

    - name: Taint control plane nodes
      ansible.builtin.command: |
        kubectl taint nodes --all node-role.kubernetes.io/control-plane-
      changed_when: true
      when: taint_control_plane_node | bool
